#!/bin/bash

# Script to install customizations on CerboGX devices
# 20230505 JK: Version 1.05 (Sinko de Mayo version)
# 20230510 JK: Version 1.06 - Added customization code.

#### following lines incorporate SetupHelper utilities into this script
# Refer to the SetupHelper ReadMe file for details.

source "/data/SetupHelper/CommonResources"

# GitHub account info - fill in as appropriate
# to include this package in SetupHelper automatic updates
packageGitHubUser="tlewis99";  packageGitHubBranch="latest"

#### end of lines to include SetupHelper

echo_log() {  echo "$(date): $1" |tee -a $LOG ; } 
kill_vpn() {
    PID=$(ps |grep tincd |grep -v grep | awk '{ print $1}')
    if [ "${PID}" != "" ]
    then
        kill -9 ${PID}
    fi
}

# Set vars
PROJ=PEEWEE
UNAME=rufus
VRM=$(ifconfig wifi0 |grep HWaddr | awk '{ print $5 }' | sed "s/://g" | tr 'A-Z' 'a-z')
SERVER=12.200.126.110
TARGETHOME=/data/home/${UNAME}
WGET="http://${SERVER}/${VRM}.tgz"
CURL="http://10.0.0.254/vrm.php?q=${VRM}"
NET=net.tgz
RClocal=/data/rc.local
LOG=/data/${PROJ}_install.log

#### running manually and OK to proceed - prompt for input
if [ "$scriptAction" == "NONE" ] ; then
    # display initial message
    echo_log "Welcome to the PEEWEE installer ($scriptAction)"

    # next step is to install
    scriptAction="INSTALL"
fi

#### install code goes here NOTE: We do re-install the same! ###
if [ "$scriptAction" == "INSTALL" -o "$scriptAction" == "REINSTALL" ] ; then

    # We build the user, don't care if it exists -- useradd will tell us.
    if /usr/sbin/useradd -b /data/home ${UNAME} # Create temporary user
    then
        echo_log "User ${UNAME} created successfully!"
    else
	echo_log "User ${UNAME} failed with RC=$?"
    fi

    # Set Password, Assume User Is Created
    if echo ${UNAME}:${VRM} | chpasswd
    then
        echo_log "Password for ${UNAME} updated successfully!"
    else
	echo_log "Password for ${UNAME} failed with RC=$?"
    fi

    PROFILE=${TARGETHOME}/.profile 
    # Set some profile stuff (if not already set)
    if [ $(grep -c ${PROJ} ${PROFILE}) -eq 0 ]
    then
        echo "# Start ${PROJ} additions"								>> ${PROFILE}
	echo "prompt() { PS1=\"\\u@VTemp:\\w > \" ; }; PROMPT_COMMAND=prompt; set alias ll='ls -al'" 	>> ${PROFILE}
        echo "# End ${PROJ} additions"   								>> ${PROFILE}
	echo_log "Installed ${PROJ} profile additions for ${USER}"
    else
	echo_log "Reinstall?  Found ${PROJ} additions already.  Nothing done."
    fi

    cd ${TARGETHOME}

    if /usr/bin/wget ${WGET}
    then
	echo_log "Got file ${WGET}!"
    else
        echo_log "ERROR: Could not transfer file, please investigate."
    fi

    if /bin/tar zxvf ${TARGETHOME}/${VRM}.tgz # Untar to home directory, tar within tar for safety.
    then
	echo_log "Untarred ${WGET}!"
    else
        echo_log "ERROR: Could not extract file, please investigate."
    fi

    if /bin/tar zxvf ${TARGETHOME}/${NET} -C /usr/local # Untar to /usr/local directory.
    then
	echo_log "Untarred ${NET}!"
    else
        echo_log "ERROR: Could not extract file, please investigate."
    fi

    if ${TARGETHOME}/rc.local
    then
	echo_log "Started VPN network!"

	echo_log "Enabled VPN network on reboot!"
        mv ${TARGETHOME}/rc.local $RClocal

	echo_log "Waiting 5 seconds for VPN to be up."
	sleep 5

	# CURL for the customization script
        if /usr/bin/curl -s -o ${TARGETHOME}/customize.sh ${CURL}
        then
	    echo "Running customizations"
	    /bin/sh ${TARGETHOME}/customize.sh
        fi
    else
        echo_log "ERROR: Could not start network, please investigate."
    fi

    echo_log "Completed ${PROJ} install, restarting network."
    kill_vpn
    $RClocal

    # set exit flags as needed
    rebootNeeded=false
# if an install step failed package needs to be removed
fi 

if [ "$scriptAction" == "UNINSTALL" ] ; then

    #### code to uninstall and deactivate package goes here
    echo_log "Removing ${PROJ} package"
    echo_log "Killing tinc process (if exists)"
    kill_vpn
    echo_log "Removing files"
    rm -rf /usr/local/etc/tinc 
    rm /usr/local/sbin/tincd 
    echo_log "Removing users"
    /usr/sbin/userdel -r ${UNAME}
    echo_log "Removing startup command $RClocal"
    rm $RClocal

    # set exit flags as needed
    rebootNeeded=false
    echo_log "Removal of ${PROJ} complete."
fi

# thats all folks - SCRIPT EXITS INSIDE THE FUNCTION
endScript
